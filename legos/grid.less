//********************************************
//	Grid Core
//********************************************/

// When writing Lego's we use BEM naming conventions.
// Do NOT put any dimensions like font-size/line-height/size/padding/margin etc. into the core Lego unless it's configurable
// The purpose of these Lego's is to have them as trimmed as possible and themed later

/// Naming conventions:
// LegoName
// LegoName--modifierName
// LegoName-descendantName
// LegoName.is-stateOfLego
// Variable names:
// @lego--modifier-property ex: @button--warning-borderColor
// @lego--modifier-descendand-property ex: @listGroup-itemHeading-fontSize

// --- Global ---
// Either use baseline units or pixels for margin/padding/height

// -------------------- Variables --------------------
// Outer margin
@grid-margin: 20px;

// Column gutter
@grid-gutter: 12px;

// Number of columns
@grid-columns: 12;

// -------------------- Core LEGO --------------------
.Grid() {
	padding-right: @grid-margin;
	padding-left: @grid-margin;
}

// -------------------- Descendands --------------------
.Grid-row() {
	box-sizing: border-box;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	margin-right: -(@grid-gutter / 2);
	margin-left: -(@grid-gutter / 2);

	// -------------------- Modifiers --------------------
	// ----- Horizontal alignment -----
	// Begin column alignment from left
	&.Grid-row--alignLeft,
	&.Grid-row--alignStart {
		justify-content: flex-start;
		text-align: start;
	}

	// Begin column alignment from center
	&.Grid-row--alignCenter {
		justify-content: center;
		text-align: center;
	}

	// Begin column alignment from right
	&.Grid-row--alignRight,
	&.Grid-row--alignEnd {
		justify-content: flex-end;
		text-align: end;
	}

	// ----- Vertical alignment -----
	// Vertically align items from top
	&.Grid-row--alignTop {
		align-items: flex-start;
	}

	// Vertically align items from middle
	&.Grid-row--alignMiddle {
		align-items: center;
	}

	// Vertically align items from bottom
	&.Grid-row--alignBottom {
		align-items: flex-end;
	}

	// ----- Distribution -----
	// Items are evenly distributed in the line with equal space around them
	&.Grid-row--distributeAround {
		justify-content: space-around;
	}

	// Items are evenly distributed in the line; first item is on the start line, last item on the end line
	&.Grid-row--distributeBetween {
		justify-content: space-between;
	}

	// ----- Ordering -----
	// Reverse order of children
	&.Grid-row--reverse {
		flex-direction: row-reverse;
		flex-wrap: wrap-reverse;
	}
}

// -------------------- Functions --------------------
// Create columns
.makeGridColumns(@screenSize: ""; @columnClassName: Grid-col) {
	// Call all loops
	._makeSharedColumnClasses(@screenSize, @columnClassName);
	._makeColumns(@screenSize, @columnClassName);
	._makeExtraColumns(@screenSize, @columnClassName);
	._makeOffsets(@screenSize);
}

// Make a column with Legolize defined media queries
.makeGridColumn(@columnSpan; @screenSize: "") {
	.create(@screenSize) when (@screenSize = "") {
		.makeGridColumnMedia(@columnSpan);
	}

	.create(@screenSize) when (@screenSize = phablet) {
		.makeGridColumnMedia(@columnSpan, @base-screen--phablet--above);
	}

	.create(@screenSize) when (@screenSize = tabletSmall) {
		.makeGridColumnMedia(@columnSpan, @base-screen--tabletSmall--above);
	}

	.create(@screenSize) when (@screenSize = tablet) {
		.makeGridColumnMedia(@columnSpan, @base-screen--tablet--above);
	}

	.create(@screenSize) when (@screenSize = desktop) {
		.makeGridColumnMedia(@columnSpan, @base-screen--desktop--above);
	}

	.create(@screenSize);
}

// Make a column for a specific media query
.makeGridColumnMedia(@columnSpan; @mediaQuery: "") {
	.create(@mediaQuery) when (@mediaQuery = "") {
		flex-basis: percentage((@columnSpan / @grid-columns));
		max-width: percentage((@columnSpan / @grid-columns));
	}

	.create(@mediaQuery) when not (@mediaQuery = "") {
		@media @mediaQuery {
			flex-basis: percentage((@columnSpan / @grid-columns));
			max-width: percentage((@columnSpan / @grid-columns));
		}
	}

	.create(@mediaQuery);
}

// -------------------- Private functions --------------------
// ----- Width -----
._makeColumnClass(@columnSpan; @screenSize: ""; @columnClassName: Grid-col) {
	// Main function
	.create(@columnSpan; @modifier) {
		.@{columnClassName}--@{columnSpan}@{modifier} {
			flex-basis: percentage((@columnSpan / @grid-columns));
			max-width: percentage((@columnSpan / @grid-columns));
		}
	}

	// Call create for Mobile first
	.setModifier(@screenSize) when (@screenSize = "") {
		@modifier: ~"";
		.create(@columnSpan, @modifier);
	}

	// Call create for a specific screen size
	.setModifier(@screenSize) when not (@screenSize = "") {
		@modifier: ~"--@{screenSize}";
		.create(@columnSpan, @modifier);
	}

	// Initial call
	.setModifier(@screenSize);
}

// ----- Offset -----
._makeOffsetClass(@columnSpan; @screenSize: "") {
	// Main function
	.create(@columnSpan; @modifier) {
		.Grid-offset--@{columnSpan}@{modifier} {
			margin-left: percentage((@columnSpan / @grid-columns));
		}
	}

	// Call create for Mobile first
	.setModifier(@screenSize) when (@screenSize = "") {
		@modifier: ~"";
		.create(@columnSpan, @modifier);
	}

	// Call create for a specific screen size
	.setModifier(@screenSize) when not (@screenSize = "") {
		@modifier: ~"--@{screenSize}";
		.create(@columnSpan, @modifier);
	}

	// Initial call
	.setModifier(@screenSize);
}

// ----- Extra columns like .Grid-col--25 -----
._makeExtraColumns(@screenSize: ""; @columnClassName: Grid-col) {
	// Main function
	.create(@modifier) {
		.@{columnClassName}--auto@{modifier} {
			flex: auto;
		}
		.@{columnClassName}--25@{modifier} {
			flex-basis: percentage((3 / 12));
			max-width: percentage((3 / 12));
		}
		.@{columnClassName}--33@{modifier} {
			flex-basis: percentage((4 / 12));
			max-width: percentage((4 / 12));
		}
		.@{columnClassName}--50@{modifier} {
			flex-basis: percentage((6 / 12));
			max-width: percentage((6 / 12));
		}
		.@{columnClassName}--66@{modifier} {
			flex-basis: percentage((8 / 12));
			max-width: percentage((8 / 12));
		}
		.@{columnClassName}--75@{modifier} {
			flex-basis: percentage((9 / 12));
			max-width: percentage((9 / 12));
		}
		.@{columnClassName}--100@{modifier} {
			flex-basis: 100%;
			max-width: 100%;
		}

		// Offset
		.Grid-offset--25@{modifier} {
			margin-left: percentage((3 / 12));
		}
		.Grid-offset--33@{modifier} {
			margin-left: percentage((4 / 12));
		}
		.Grid-offset--50@{modifier} {
			margin-left: percentage((6 / 12));
		}
		.Grid-offset--66@{modifier} {
			margin-left: percentage((8 / 12));
		}
		.Grid-offset--75@{modifier} {
			margin-left: percentage((9 / 12));
		}
		.Grid-offset--100@{modifier} {
			margin-left: 100%;
		}
	}

	// Call create for Mobile first
	.setModifier(@screenSize) when (@screenSize = "") {
		@modifier: ~"";
		.create(@modifier);
	}

	// Call create for a specific screen size
	.setModifier(@screenSize) when not (@screenSize = "") {
		@modifier: ~"--@{screenSize}";
		.create(@modifier);
	}

	// Initial call
	.setModifier(@screenSize);
}

// ----- Modifiers -----
// TODO: Make them to a higher specificy level (.Grid-col.something)
._makeColumnModifiers(@columnClassName: Grid-col) {
	// ---------- Ordering ----------
	.@{columnClassName}--reverse {
		flex-direction: column-reverse;
		flex-wrap: wrap-reverse;
	}

	// Make column first in order
	.@{columnClassName}--orderFirst {
		order: -1;
	}

	// Make column last in order
	.@{columnClassName}--orderLast {
		order: 1;
	}
}

// -------------------- Loops --------------------
// Compile a list of classes that share properties
._makeSharedColumnClasses(@screenSize: ""; @columnClassName: Grid-col) {
	// Main function
	.create(@columnClassName; @modifier) {
		// First
		.list(@column) {
			// ex: .Grid-col--desktop, .Grid-col--1--desktop
			@item: ~".@{columnClassName}@{modifier}, .@{columnClassName}--auto@{modifier}, .@{columnClassName}--25@{modifier}, .@{columnClassName}--33@{modifier}, .@{columnClassName}--50@{modifier}, .@{columnClassName}--66@{modifier}, .@{columnClassName}--75@{modifier}, .@{columnClassName}--100@{modifier}, .@{columnClassName}--@{column}@{modifier}";

			// Call self
			.list((@column + 1), @item);
		}

		// The rest
		.list(@column, @list) when (@column =< @grid-columns) {
			@item: ~".@{columnClassName}--@{column}@{modifier}";

			// Call self
			.list((@column + 1), ~"@{list}, @{item}");
		}

		// When the list is compiled we create the class
		.list(@column, @list) when (@column > @grid-columns) {
			@{list} {
				box-sizing: border-box;
				flex-direction: column;
				flex-grow: 0;
				flex-shrink: 0;
				padding-right: @grid-gutter / 2;
				padding-left: @grid-gutter / 2;
			}
		}

		// First iteration
		.list(1);
	}

	// Call create for Mobile first
	.setModifier(@screenSize) when (@screenSize = "") {
		@modifier: ~"";
		.create(@columnClassName, @modifier);
	}

	// Call create for a specific screen size
	.setModifier(@screenSize) when not (@screenSize = "") {
		@modifier: ~"--@{screenSize}";
		.create(@columnClassName, @modifier);
	}

	// Initial call
	.setModifier(@screenSize);
}

// Loop to create all column widths classes
._makeColumns(@screenSize: ""; @columnClassName: Grid-col) {
	.create(@column) when (@column =< @grid-columns) {
		._makeColumnClass(@column, @screenSize, @columnClassName);

		// Call self again
		.create(@column + 1);
	}

	.create(1); // First iteration
	._makeColumnModifiers();
}

// Loop to create all offset classes
._makeOffsets(@screenSize: "") {
	.create(@column) when (@column =< @grid-columns) {
		._makeOffsetClass(@column, @screenSize);

		// Call self again
		.create(@column + 1);
	}

	.create(1); // First iteration
}

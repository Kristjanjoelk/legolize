
//********************************************
//	Caret Core
//********************************************/

// When writing Lego's we use BEM naming conventions.
// Do NOT put any dimensions like font-size/line-height/size/padding/margin etc. into the core Lego unless it's configurable
// The purpose of these Lego's is to have them as trimmed as possible and themed later

/// Naming conventions:
// LegoName
// LegoName--modifierName
// LegoName-descendantName
// LegoName.is-stateOfLego
// Variable names:
// @lego--modifier-property ex: @button--warning-borderColor
// @lego--modifier-descendand-property ex: @listGroup-itemHeading-fontSize

// --- Global ---
// Either use baseline units or pixels for margin/padding/height

// -------------------- Core LEGO --------------------
.Caret() {
	display: block;
	position: relative;

	&:after,
	&:before {
		border: solid transparent;
		content: " ";
		height: 0;
		width: 0;
		position: absolute;
	}
}

// -------------------- Descendands --------------------

// ---------------------- States ---------------------

// ---------------------- Variants ---------------------
.Caret--inside() {
	position: absolute;
}

.Caret--top()    { .caretVariant(bottom, left, @caret-default-size); }
.Caret--right()  { .caretVariant(left,   top,  @caret-default-size); }
.Caret--bottom() { .caretVariant(top,    left, @caret-default-size); }
.Caret--left()   { .caretVariant(right,  top,  @caret-default-size); }

.Caret--top-Caret--xs()    { .caretVariant(bottom, left, @caret--xs-size); }
.Caret--right-Caret--xs()  { .caretVariant(left,   top,  @caret--xs-size); }
.Caret--bottom-Caret--xs() { .caretVariant(top,    left, @caret--xs-size); }
.Caret--left-Caret--xs()   { .caretVariant(right,  top,  @caret--xs-size); }

.Caret--top-Caret--sm()    { .caretVariant(bottom, left, @caret--sm-size); }
.Caret--right-Caret--sm()  { .caretVariant(left,   top,  @caret--sm-size); }
.Caret--bottom-Caret--sm() { .caretVariant(top,    left, @caret--sm-size); }
.Caret--left-Caret--sm()   { .caretVariant(right,  top,  @caret--sm-size); }

.Caret--top-Caret--lg()    { .caretVariant(bottom, left, @caret--lg-size); }
.Caret--right-Caret--lg()  { .caretVariant(left,   top,  @caret--lg-size); }
.Caret--bottom-Caret--lg() { .caretVariant(top,    left, @caret--lg-size); }
.Caret--left-Caret--lg()   { .caretVariant(right,  top,  @caret--lg-size); }

.Caret--top-Caret--xl()    { .caretVariant(bottom, left, @caret--xl-size); }
.Caret--right-Caret--xl()  { .caretVariant(left,   top,  @caret--xl-size); }
.Caret--bottom-Caret--xl() { .caretVariant(top,    left, @caret--xl-size); }
.Caret--left-Caret--xl()   { .caretVariant(right,  top,  @caret--xl-size); }

// ---------------------- Mixins ---------------------
.caretVariant(@position1, @position2, @caret-size) {
	&:after,
	&:before {
		@{position1}: 100%;
		@{position2}: 50%;
	}
	&:before {
		border-@{position1}-color: @caret-borderColor;
		margin-@{position2}: -2 * @caret-size;
		border-width: 2 * @caret-size;
	}
	&:after {
		border-@{position1}-color: @caret-bgColor;
		margin-@{position2}: -@caret-size;
		border-width: @caret-size;
	}
}

//********************************************
//	Caret Core
//********************************************/

// When writing Lego's we use BEM naming conventions.
// Do NOT put any dimensions like font-size/line-height/size/padding/margin etc. into the core Lego unless it's configurable
// The purpose of these Lego's is to have them as trimmed as possible and themed later

/// Naming conventions:
// LegoName
// LegoName--modifierName
// LegoName-descendantName
// LegoName.is-stateOfLego
// Variable names:
// @lego--modifier-property ex: @button--warning-borderColor
// @lego--modifier-descendand-property ex: @listGroup-itemHeading-fontSize

// --- Global ---
// Either use baseline units or pixels for margin/padding/height

// -------------------- Core LEGO --------------------
.Caret() {
	display: block;
	position: relative;

	&:after,
	&:before {
		border: solid transparent;
		content: " ";
		height: 0;
		width: 0;
		position: absolute;
	}
}

// -------------------- Descendands --------------------

// ---------------------- States ---------------------

// ---------------------- Variants ---------------------
.Caret--inside() {
	position: absolute;
}

.Caret--top(@caret-border-width: 1px)				{ .caretVariant(bottom, left, @caret-default-size, @caret-border-width); }
.Caret--right(@caret-border-width: 1px)				{ .caretVariant(left,   top,  @caret-default-size, @caret-border-width); }
.Caret--bottom(@caret-border-width: 1px)			{ .caretVariant(top,    left, @caret-default-size, @caret-border-width); }
.Caret--left(@caret-border-width: 1px)				{ .caretVariant(right,  top,  @caret-default-size, @caret-border-width); }

.Caret--top-Caret--xs(@caret-border-width: 1px)		{ .caretVariant(bottom, left, @caret--xs-size, @caret-border-width); }
.Caret--right-Caret--xs(@caret-border-width: 1px)	{ .caretVariant(left,   top,  @caret--xs-size, @caret-border-width); }
.Caret--bottom-Caret--xs(@caret-border-width: 1px)	{ .caretVariant(top,    left, @caret--xs-size, @caret-border-width); }
.Caret--left-Caret--xs(@caret-border-width: 1px)	{ .caretVariant(right,  top,  @caret--xs-size, @caret-border-width); }

.Caret--top-Caret--sm(@caret-border-width: 1px)		{ .caretVariant(bottom, left, @caret--sm-size, @caret-border-width); }
.Caret--right-Caret--sm(@caret-border-width: 1px)	{ .caretVariant(left,   top,  @caret--sm-size, @caret-border-width); }
.Caret--bottom-Caret--sm(@caret-border-width: 1px)	{ .caretVariant(top,    left, @caret--sm-size, @caret-border-width); }
.Caret--left-Caret--sm(@caret-border-width: 1px)	{ .caretVariant(right,  top,  @caret--sm-size, @caret-border-width); }

.Caret--top-Caret--lg(@caret-border-width: 1px)		{ .caretVariant(bottom, left, @caret--lg-size, @caret-border-width); }
.Caret--right-Caret--lg(@caret-border-width: 1px)	{ .caretVariant(left,   top,  @caret--lg-size, @caret-border-width); }
.Caret--bottom-Caret--lg(@caret-border-width: 1px)	{ .caretVariant(top,    left, @caret--lg-size, @caret-border-width); }
.Caret--left-Caret--lg(@caret-border-width: 1px)	{ .caretVariant(right,  top,  @caret--lg-size, @caret-border-width); }

.Caret--top-Caret--xl(@caret-border-width: 1px)		{ .caretVariant(bottom, left, @caret--xl-size, @caret-border-width); }
.Caret--right-Caret--xl(@caret-border-width: 1px)	{ .caretVariant(left,   top,  @caret--xl-size, @caret-border-width); }
.Caret--bottom-Caret--xl(@caret-border-width: 1px)	{ .caretVariant(top,    left, @caret--xl-size, @caret-border-width); }
.Caret--left-Caret--xl(@caret-border-width: 1px)	{ .caretVariant(right,  top,  @caret--xl-size, @caret-border-width); }

// ---------------------- Mixins ---------------------
.caretVariant(@position1, @position2, @caret-size, @border-width) {
	&:after,
	&:before {
		@{position1}: 100%;
		@{position2}: 50%;
	}
	&:before {
		border-@{position1}-color: @caret-borderColor;
		margin-@{position2}: -(@caret-size + @border-width);
		border-width: @caret-size + @border-width;
	}
	&:after {
		border-@{position1}-color: @caret-bgColor;
		margin-@{position2}: -@caret-size;
		border-width: @caret-size;
	}
}